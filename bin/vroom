#!/bin/bash
# 30/08/2018 update - will only switch to a branch if
# provided as first argument; will warn if changes
# 10/06/2019 update - branch is now -b
# 03/09/2019 update - massive overhaul, adding `start:local`, adding project config
# 03/09/2020 update - annual overhaul
# 03/09/2021 update - annual overhaul
# 06/22/2021 update - I realized that I'm basically trying to recreate `make` with
# 08/12/2021 update - Only calls without params will initialize vroom, so I'm retooling vroom as a wrapper for make
# 09/06/2022 update - Working on tools with ambiguous file systems, allow expressly defining
# 08/01/2025 update - Adding Claude Code type
# 09/08/2025 update - Adding uv, revising "python" to "pip"
version=12.3.0
usage="$(basename "$0") [-edhlLrstvw] [targets]
Uses \`make\` under-the-covers, creating four main parts: destroy, setup, run, watch. Logs to STDOUT unless -l is provided.
â€¢ With no parameters, initializes .vroom or assumes -r, if [dsw] then -r is not assumed and must be explicitly requested
â€¢ Destroy: generally undoes all the things that Setup does.
â€¢ Setup: Setting up linking, cleaning dist/node_modules, etc. Default is based on language, package manager, etc.
â€¢ Run: Main executor of your project locally. Default is best-guess
â€¢ Watch: Use this to run a long-running 'watch' command. Default is no-op
â€¢ Targets: Feel free to create your own targets in .vroom and use positional arguments!

Custom makefile (.vroom):
Follow syntax rules for makefile (https://www.gnu.org/software/make/manual/make.html)

Supported auto-configure platforms are
â€¢ Docker / Compose
â€¢ Python (with Pipfile or uv)
â€¢ NPM (with package.json) - Will try to use NVM before commands
â€¢ Yarn (with yarn.lock) - Will try to use NVM before commands
â€¢ PHP/Composer (with composer.json)
â€¢ Claude Code (via NPM w/CLAUDE.md)

Other platforms can still be setup manually; just start with vroom -e

Options:
  -e edit config
  -f full run of dsrw
  -d execute Destroy command
  -h show this message
  -l log to server.log or provided -L param
  -L Change output file (implies -l)
  -p print config
  -r execute Run command
  -s execute Setup command
  -t [type] Type of project (compose, compose-local, docker, npm, yarn, pip, uv, php)
  -v Prints version info
  -w execute Watch command after other operations

Examples:
  vroom: Setup NVM, switch to the right NPM version, execute the RunCmd
  vroom -t npm: Ignores project files and sets project type to npm, then does the above
  vroom -l: Setup NVM, switch to the right NPM version, execute the runCmd, log all to 'server.log'
  vroom -e: Edit .vroom file from current directory
  vroom -p: Print .vroom file from current directory
  vroom -s: Setup NVM, switch to the right NPM version, execute the setupCmd
  vroom -sr: Setup NVM, switch to the right NPM version, execute setupCmd then runCmd
  vroom -lrs: Setup NVM, switch to the right NPM version, execute setupCmd then runCmd, log all to 'server.log'
  vroom -d: Setup NVM, switch to the right NPM version, execute the destroyCmd
  vroom -f: Setup NVM, switch to the right NPM version, execute destroyCmd, execute setupCmd, runCmd, then watchCmd"

base_project() {
  if [ -d '.git' ]; then
    changes=$(git diff --name-only)
  fi

  if [ "$type" == 'compose-local' ] || [ "$type" == 'compose' ]; then
    manager="docker-compose -f docker-$type.yml"
  elif [ "$type" = 'docker' ]; then
    manager="docker"
    setup="build -t $(basename "$(pwd)":1) ."
  elif [ "$type" == 'npm' ] || [ "$type" == 'yarn' ] || [ "$type" == 'claude' ]; then
    if [ -f ".nvmrc" ]; then
      if ! command -v nvm &> /dev/null ; then
        echo "Found .nvmrc file; wiring up NVM"       # Node w/ NVM/NPM/Yarn/etc.
        # shellcheck disable=SC1091
        source "$NVM_DIR/nvm.sh" > /dev/null 2>&1     # assume things are wired up normally
      fi
      nvm install
    fi
    if [ "$type" == 'claude' ]; then
      manager="npm"
      setup='install -g @anthropic-ai/claude-code'
    elif [ "$type" == 'yarn' ]; then
      manager="yarn"
      setup='install'
    else
      manager="npm"
      available=$(npm)
      if [[ "$available" =~ " ci," ]] && [ -f "package-lock.json" ]; then
        setup="ci"
      else
        setup="install"
      fi
    fi
  elif [ "$type" == 'php' ]; then
    manager="composer"
    setup="install"
  elif [ "$type" == 'uv' ]; then
    manager="uv"
    setup="sync"
  elif [ "$type" == 'pip' ]; then
    manager="pipenv"
    setup="install"
  fi
}

configure_type() {
  modeString=$'^vroom_type *= *([^\n]*)'
  # If type was passed in, use that
  if [ -n "$type" ]; then
    return
  # Else, if .vroom exists and defines a project type, use it
  elif [ -f '.vroom' ] && [[ $(<.vroom) =~ $modeString ]]; then
    type="${BASH_REMATCH[1]}"
  # Else check for project type
  elif [ -f "CLAUDE.md" ]; then
    type='claude'
  elif [ -f "docker-compose-local.yml" ]; then
    type='compose-local'
  elif [ -f "docker-compose.yml" ]; then
    type='compose'
  elif [ -f "Dockerfile" ]; then
    type='docker'
  elif [ -f "yarn.lock" ]; then
    type='yarn'
  elif [ -f 'composer.json' ]; then
    type='php'
  elif [ -f 'pyproject.toml' ]; then
    type='uv'
  elif [ -f 'Pipfile' ]; then
    type='pip'
  else
    type="npm"
  fi
}

configure_destroy() {
  if [ "$type" == 'uv' ]; then
    destroyCmd="rm -rf .venv"
  elif [ -n "$updateConfig" ]; then
    destroyCmd="echo 'Chill. Have a ðŸ¥ƒ'"
  fi
}

configure_setup() {
  if [ -n "$updateConfig" ]; then
    setupCmd="$manager $setup"
  fi
}

configure_run() {
  if [ -n "$updateConfig" ]; then
    set_default_run
  fi
}

set_default_run() {
  if [ "$type" == 'claude' ]; then
    runCmd="claude"
  elif [ "$type" == 'compose' ] || [ "$type" == 'compose-local' ]; then
    runCmd="$manager -f docker-$type.yml up -d"
  elif [ "$type" == 'docker' ]; then
    runCmd="$manager run $(basename "$(pwd)":1)"
  elif [ "$type" == 'uv' ]; then
    if [ -f "main.py" ]; then
      runCmd="$manager run main.py"
    elif [ -f "app.py" ]; then
      runCmd="$manager run app.py"
    else
      runCmd="echo \"\033[31;47mCan't predict Python main file! Run \033[32m'vroom -e'\033[31m and set run: to your start command!\033[0m\""
    fi
  elif [ "$type" == 'pip' ]; then
      runCmd="echo \"\033[31;47mCan't predict Python main file! Run \033[32m'vroom -e'\033[31m and set run: to your start command!\033[0m\""
  elif [ "$type" == 'php' ]; then
    # TODO: Verify next time I'm on a Laravel project without Docker...
    runCmd="$manager artisan serve"
  else
    # NPM-based projects will return a list of valid commands from the `run` command
    # checks for, in order, `start:local`, `start:dev`, `dev`, `start` as default
    startLocalRegex='[[:space:]]+start:local[[:space:]]+'
    startDevRegex='[[:space:]]+start:dev[[:space:]]+'
    devRegex='[[:space:]]dev[[:space:]]+'
    scripts=$(eval "$manager run")

    if [[ "$scripts" =~ $startLocalRegex ]]; then
      runCmd="$manager run start:local"
    elif [[ "$scripts" =~ $startDevRegex ]]; then
      runCmd="$manager run start:dev"
    elif [[ "$scripts" =~ $devRegex ]]; then
      runCmd="$manager run dev"
    else
      runCmd="$manager run start"
    fi
  fi
}

configure_watch() {
  if [ -n "$updateConfig" ]; then
    watchCmd="echo 'Why not watch a ðŸ¥ƒ'"
  fi
}

editConfig() {
  if [ ! -f '.vroom' ]; then
    # shellcheck disable=SC2028
    echo "vroom_type = $type\nnone:\ndestroy:\nsetup:\nrun:\nwatch:\n\n# vim: ft=make" | vi -c ":f .vroom" -
  else
    vi .vroom
  fi
}

while getopts ':hdefpL:lrst:wv' option; do
  case "$option" in
    h) echo "$usage"
      exit
      ;;
    d) doDestroy="true"
      ;;
    e) editConfig
      exit
      ;;
    f) doDestroy="true"
       doRun="true"
       doSetup="true"
       doWatch="true"
      ;;
    p) cat .vroom
      exit
      ;;
    L) logFile="$OPTARG"
      ;;
    l) logToFile="true"
      ;;
    r) doRun="true"
      ;;
    s) doSetup="true"
      ;;
    t) type="$OPTARG"
      ;;
    w) doWatch="true"
      ;;
    v) echo "$version"
      exit
      ;;
    *) echo "Unknown Option '$OPTARG', exiting"
      exit
      ;;
  esac
done
shift $((OPTIND -1))

if [ -n "$logToFile" ] || [ -n "$logFile" ]; then
  if [ -z "$logFile" ]; then
    logFile="server.log"
  fi
  # shellcheck disable=2028
  echo "\033[0;31mrun 'less +F $logFile' to see the logs.\033[0m"
  # holy moly, exec redirects script output!
  exec > "$logFile"
  exec 2>&1
fi
# Scan file system for clues of what kind or project this is
configure_type
# sets changes, manager, and setup
base_project

# Handle updating unchanged branch
if [ -d ".git" ] && [ -z "$changes" ]; then
  echo "no local changes, pulling from origin";
  git pull > /dev/null 2>&1
fi

[ -z "$doDestroy" ] && [ -z "$doSetup" ] && [ -z "$doWatch" ] && [ -z "$*" ] && noflags='true' || noflags=''

config="$(pwd)/.vroom"
if ! [ -f "$config" ] && [ -n "$noflags" ]; then
  if [ -n "$noflags" ]; then
    doSetup="true"
    updateConfig="true"
  else
    echo "Please call without arguments/options to initialize."
    return
  fi
fi

if [ -n "$noflags" ]; then
  doRun="true"
fi

configure_destroy
configure_setup
configure_run
configure_watch

# Write out the config if changed
if [ -n "$updateConfig" ]; then
  rm "$config" &> /dev/null
  printf "vroom_type = %s
none:
destroy:
	%s
setup:
	%s
run:
	%s
watch:
	%s
# vim: ft=make" "$type" "$destroyCmd" "$setupCmd" "$runCmd" "$watchCmd" > "$config"
fi
if [[ "$doDestroy" == "true" ]]; then
  make -f "$config" destroy
fi

if [[ "$doSetup" == "true" ]]; then
  make -f "$config" setup
fi

if [[ "$doRun" == "true" ]]; then
  make -f "$config" run
fi

if [[ "$doWatch" == "true" ]]; then
  make -f "$config" watch
fi

if [[ -n "$*" ]]; then
  make -f "$config" "$@"
fi
